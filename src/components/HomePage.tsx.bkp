'use client';

import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Plus, Music, Calendar, Edit, Trash2, Play } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { useSetlist } from '@/contexts/SetlistContext';
import { SetlistEditor } from '@/components/SetlistEditor';
import { Setlist } from '../types';

interface CreateSetlistFormData {
  name: string;
  description: string;
}

export function HomePage() {
  const { state, createSetlist, deleteSetlist } = useSetlist();
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [currentView, setCurrentView] = useState<'home' | 'setlist'>('home');
  const [selectedSetlist, setSelectedSetlist] = useState<Setlist | null>(null);
  const [formData, setFormData] = useState<CreateSetlistFormData>({
    name: '',
    description: '',
  });

  const handleCreateSetlist = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!formData.name.trim()) return;

    await createSetlist(formData.name, formData.description);
    setFormData({ name: '', description: '' });
    setIsCreateDialogOpen(false);
  };

  const handleDeleteSetlist = async (setlistId: string) => {
    if (confirm('Tem certeza que deseja excluir este setlist?')) {
      await deleteSetlist(setlistId);
    }
  };

  const handleOpenSetlist = (setlist: Setlist) => {
    setSelectedSetlist(setlist);
    setCurrentView('setlist');
  };

  const formatDate = (date: Date | string) => {
    const d = typeof date === 'string' ? new Date(date) : date;
    return d.toLocaleDateString('pt-BR');
  };

  // Renderizar SetlistEditor se um setlist foi selecionado
  if (currentView === 'setlist' && selectedSetlist) {
    return (
      <SetlistEditor
        setlist={selectedSetlist}
        onBack={() => {
          setCurrentView('home');
          setSelectedSetlist(null);
        }}
      />
    );
  }

  return (
    <div className="min-h-screen bg-background p-4">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="text-center mb-8"
        >
          <h1 className="text-5xl font-bold neon-text mb-2">
            Setlist Wade
          </h1>
          <p className="text-muted-foreground text-lg">
            Organize suas setlists com letras e cifras
          </p>
        </motion.div>

        {/* Create Button */}
        <motion.div
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ duration: 0.5, delay: 0.2 }}
          className="mb-8 flex justify-center"
        >
          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
            <DialogTrigger asChild>
              <Button size="lg" className="neon-glow">
                <Plus className="mr-2 h-5 w-5" />
                Criar Novo Setlist
              </Button>
            </DialogTrigger>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>Criar Novo Setlist</DialogTitle>
              </DialogHeader>
              <form onSubmit={handleCreateSetlist} className="space-y-4">
                <div>
                  <Label htmlFor="name">Nome do Setlist</Label>
                  <Input
                    id="name"
                    value={formData.name}
                    onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                    placeholder="Ex: Show Rock in Rio 2024"
                    required
                  />
                </div>
                <div>
                  <Label htmlFor="description">Descrição (opcional)</Label>
                  <Textarea
                    id="description"
                    value={formData.description}
                    onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                    placeholder="Descrição do setlist..."
                    rows={3}
                  />
                </div>
                <div className="flex gap-2 pt-4">
                  <Button type="submit" className="flex-1">
                    Criar Setlist
                  </Button>
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => setIsCreateDialogOpen(false)}
                  >
                    Cancelar
                  </Button>
                </div>
              </form>
            </DialogContent>
          </Dialog>
        </motion.div>

        {/* Loading State */}
        {state.isLoading && (
          <div className="text-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
            <p className="text-muted-foreground">Carregando setlists...</p>
          </div>
        )}

        {/* Error State */}
        {state.error && (
          <div className="text-center">
            <p className="text-destructive">{state.error}</p>
          </div>
        )}

        {/* Setlists Grid */}
        {!state.isLoading && !state.error && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5, delay: 0.4 }}
          >
            {state.setlists.length === 0 ? (
              <div className="text-center py-12">
                <Music className="h-24 w-24 text-muted-foreground mx-auto mb-4" />
                <h3 className="text-xl font-semibold text-muted-foreground mb-2">
                  Nenhum setlist criado
                </h3>
                <p className="text-muted-foreground">
                  Crie seu primeiro setlist para começar a organizar suas músicas
                </p>
              </div>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {state.setlists.map((setlist, index) => (
                  <motion.div
                    key={setlist.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.3, delay: index * 0.1 }}
                  >
                    <SetlistCard
                      setlist={setlist}
                      onDelete={() => handleDeleteSetlist(setlist.id)}
                      onOpen={() => handleOpenSetlist(setlist)}
                    />
                  </motion.div>
                ))}
              </div>
            )}
          </motion.div>
        )}
      </div>
    </div>
  );
}

interface SetlistCardProps {
  setlist: Setlist;
  onDelete: () => void;
  onOpen: () => void;
}

function SetlistCard({ setlist, onDelete, onOpen }: SetlistCardProps) {
  const formatDate = (date: Date | string) => {
    const d = typeof date === 'string' ? new Date(date) : date;
    return d.toLocaleDateString('pt-BR');
  };

  return (
    <Card className="setlist-card group">
      <CardHeader className="pb-3">
        <div className="flex items-start justify-between">
          <div className="flex-1">
            <CardTitle className="text-lg font-bold text-foreground group-hover:text-primary transition-colors">
              {setlist.name}
            </CardTitle>
            {setlist.description && (
              <p className="text-sm text-muted-foreground mt-1 line-clamp-2">
                {setlist.description}
              </p>
            )}
          </div>
          <div className="flex gap-1 opacity-0 group-hover:opacity-100 transition-opacity">
            <Button size="sm" variant="ghost" className="h-8 w-8 p-0">
              <Edit className="h-4 w-4" />
            </Button>
            <Button
              size="sm"
              variant="ghost"
              className="h-8 w-8 p-0 text-destructive hover:text-destructive"
              onClick={onDelete}
            >
              <Trash2 className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </CardHeader>
      <CardContent>
        <div className="space-y-3">
          <div className="flex items-center justify-between text-sm">
            <div className="flex items-center gap-1 text-muted-foreground">
              <Music className="h-4 w-4" />
              <span>{setlist.musics.length} músicas</span>
            </div>
            <div className="flex items-center gap-1 text-muted-foreground">
              <Calendar className="h-4 w-4" />
              <span>{formatDate(setlist.createdAt)}</span>
            </div>
          </div>
          
          <Button className="w-full" variant="default" onClick={onOpen}>
            <Play className="mr-2 h-4 w-4" />
            Abrir Setlist
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}