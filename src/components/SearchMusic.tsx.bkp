'use client';

import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Search, Plus, Music, ExternalLink, Loader2 } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Badge } from '@/components/ui/badge';
import { searchCifraClub, importMusicFromCifraClub } from '@/utils/cifraclub';
import { useSetlist } from '@/contexts/SetlistContext';
import { SearchResult, Music } from '../types';

interface SearchMusicProps {
  setlistId: string;
  onMusicAdded?: (music: Music) => void;
}

export function SearchMusic({ setlistId, onMusicAdded }: SearchMusicProps) {
  const { addMusicToSetlist } = useSetlist();
  const [isOpen, setIsOpen] = useState(false);
  const [query, setQuery] = useState('');
  const [searchResults, setSearchResults] = useState<SearchResult[]>([]);
  const [isSearching, setIsSearching] = useState(false);
  const [isImporting, setIsImporting] = useState<string | null>(null);

  const handleSearch = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!query.trim()) return;

    setIsSearching(true);
    try {
      const results = await searchCifraClub(query);
      setSearchResults(results);
    } catch (error) {
      console.error('Erro na busca:', error);
      setSearchResults([]);
    } finally {
      setIsSearching(false);
    }
  };

  const handleImportMusic = async (result: SearchResult) => {
    setIsImporting(result.url);
    try {
      const music = await importMusicFromCifraClub(result.url);
      if (music) {
        await addMusicToSetlist(setlistId, music);
        onMusicAdded?.(music);
        setIsOpen(false);
        setQuery('');
        setSearchResults([]);
      }
    } catch (error) {
      console.error('Erro ao importar música:', error);
    } finally {
      setIsImporting(null);
    }
  };

  const resetSearch = () => {
    setQuery('');
    setSearchResults([]);
    setIsSearching(false);
    setIsImporting(null);
  };

  return (
    <Dialog open={isOpen} onOpenChange={(open) => {
      setIsOpen(open);
      if (!open) resetSearch();
    }}>
      <DialogTrigger asChild>
        <Button className="w-full" variant="outline">
          <Plus className="mr-2 h-4 w-4" />
          Buscar Música no CifraClub
        </Button>
      </DialogTrigger>
      <DialogContent className="max-w-4xl max-h-[80vh] overflow-hidden flex flex-col">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Music className="h-5 w-5" />
            Buscar Música no CifraClub
          </DialogTitle>
        </DialogHeader>
        
        <div className="flex flex-col gap-4 flex-1 min-h-0">
          {/* Formulário de busca */}
          <form onSubmit={handleSearch} className="flex gap-2">
            <Input
              value={query}
              onChange={(e) => setQuery(e.target.value)}
              placeholder="Digite o nome da música ou artista..."
              className="flex-1"
              disabled={isSearching}
            />
            <Button type="submit" disabled={isSearching || !query.trim()}>
              {isSearching ? (
                <Loader2 className="h-4 w-4 animate-spin" />
              ) : (
                <Search className="h-4 w-4" />
              )}
            </Button>
          </form>

          {/* Resultados da busca */}
          <div className="flex-1 overflow-y-auto">
            {isSearching && (
              <div className="flex items-center justify-center p-8">
                <div className="text-center">
                  <Loader2 className="h-8 w-8 animate-spin mx-auto mb-2 text-primary" />
                  <p className="text-muted-foreground">Buscando músicas...</p>
                </div>
              </div>
            )}

            {!isSearching && searchResults.length === 0 && query && (
              <div className="text-center p-8">
                <Music className="h-12 w-12 text-muted-foreground mx-auto mb-2" />
                <p className="text-muted-foreground">Nenhuma música encontrada</p>
                <p className="text-sm text-muted-foreground mt-1">
                  Tente buscar com termos diferentes
                </p>
              </div>
            )}

            {!isSearching && !query && (
              <div className="text-center p-8">
                <Search className="h-12 w-12 text-muted-foreground mx-auto mb-2" />
                <p className="text-muted-foreground">Digite algo para buscar</p>
                <p className="text-sm text-muted-foreground mt-1">
                  Ex: "Imagine Dragons - Radioactive"
                </p>
              </div>
            )}

            {searchResults.length > 0 && (
              <div className="space-y-3">
                {searchResults.map((result, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.2, delay: index * 0.05 }}
                  >
                    <SearchResultCard
                      result={result}
                      onImport={() => handleImportMusic(result)}
                      isImporting={isImporting === result.url}
                    />
                  </motion.div>
                ))}
              </div>
            )}
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}

interface SearchResultCardProps {
  result: SearchResult;
  onImport: () => void;
  isImporting: boolean;
}

function SearchResultCard({ result, onImport, isImporting }: SearchResultCardProps) {
  return (
    <Card className="music-card">
      <CardContent className="p-4">
        <div className="flex items-center justify-between">
          <div className="flex-1">
            <h4 className="font-semibold text-foreground">{result.title}</h4>
            <p className="text-muted-foreground text-sm">{result.artist}</p>
            {result.key && (
              <Badge variant="outline" className="mt-1">
                Tom: {result.key}
              </Badge>
            )}
          </div>
          
          <div className="flex items-center gap-2">
            <Button
              size="sm"
              variant="ghost"
              className="text-muted-foreground hover:text-foreground"
              onClick={() => window.open(result.url, '_blank')}
            >
              <ExternalLink className="h-4 w-4" />
            </Button>
            
            <Button
              size="sm"
              onClick={onImport}
              disabled={isImporting}
              className="min-w-[100px]"
            >
              {isImporting ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Importando...
                </>
              ) : (
                <>
                  <Plus className="mr-2 h-4 w-4" />
                  Importar
                </>
              )}
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}